import os
import logging
import nest_asyncio
from flask import Flask, request, Response, jsonify
from telegram import Update, Bot
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
import httpx
from threading import Thread

# === –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ===
nest_asyncio.apply()
app = Flask(__name__)
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
else:
    logging.info(f"BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {BOT_TOKEN[:5]}...")

bot = Bot(BOT_TOKEN)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ===
CLIENT_NAME, ROOM_TYPE, LOCATION, CLIENT_GOAL, WHAT_DONE, MATERIALS, FEATURES, GDRIVE = range(8)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ===
async def notify_admin(data: dict):
    admin_id = 130060469  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        summary = (
            f"üì¢ *New Project Submitted!*\n\n"
            f"üë§ Client: {data.get('client_name') or '‚Äî'}\n"
            f"üèóÔ∏è Room: {data.get('room_type') or '‚Äî'}\n"
            f"üìç Location: {data.get('location') or '‚Äî'}\n"
            f"üåü Goal: {data.get('goal') or '‚Äî'}\n"
            f"üí™ Work done: {data.get('what_done') or '‚Äî'}\n"
            f"üß± Materials: {data.get('materials') or '‚Äî'}\n"
            f"‚ú® Features: {data.get('features') or '‚Äî'}\n"
            f"üìÇ Google Drive: {data.get('drive_link') or '‚Äî'}"
        )
        await bot.send_message(chat_id=admin_id, text=summary, parse_mode="Markdown")
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

# === –•—ç–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    context.user_data.clear()
    await update.message.reply_text("üôã‚Äç‚ôÇÔ∏è What is the client's name?")
    return CLIENT_NAME

async def get_or_skip(update, context, key, next_state, prompt):
    text = update.message.text
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è {key}: {text}")
    
    context.user_data[key] = None if text.strip().lower() == "/skip" else text.strip()
    await update.message.reply_text(prompt)
    return next_state

async def get_client_name(update, context): return await get_or_skip(update, context, "client_name", ROOM_TYPE, "üèóÔ∏è What room did you work on?")
async def get_room_type(update, context): return await get_or_skip(update, context, "room_type", LOCATION, "üìç In which city and state was this project completed?")
async def get_location(update, context): return await get_or_skip(update, context, "location", CLIENT_GOAL, "üåü What was the client's goal for this space? (e.g. more space, modern look, old layout, etc.)")
async def get_goal(update, context): return await get_or_skip(update, context, "goal", WHAT_DONE, "üí™ What did your team do in this project?")
async def get_done(update, context): return await get_or_skip(update, context, "what_done", MATERIALS, "üß± What materials were used? (names, colors)")
async def get_materials(update, context): return await get_or_skip(update, context, "materials", FEATURES, "‚ú® Any unique features, smart ideas or details to highlight?")
async def get_features(update, context): return await get_or_skip(update, context, "features", GDRIVE, "üìÇ Paste the Google Drive folder link (with folders: before, after, 3D, drawings)")

async def get_drive_link(update, context):
    text = update.message.text
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è drive_link: {text}")
    
    context.user_data["drive_link"] = None if text.strip().lower() == "/skip" else text.strip()
    await update.message.reply_text("üéâ Project saved. Thank you!")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞: {context.user_data}")
    
    await notify_admin(context.user_data)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
    await update.message.reply_text("‚ùå Project canceled.")
    return ConversationHandler.END

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ ===
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CLIENT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_client_name)],
        ROOM_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_room_type)],
        LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_location)],
        CLIENT_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_goal)],
        WHAT_DONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_done)],
        MATERIALS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_materials)],
        FEATURES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_features)],
        GDRIVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_drive_link)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True,
)

telegram_app.add_handler(conv_handler)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
async def log_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")

telegram_app.add_handler(MessageHandler(filters.ALL, log_update), group=-1)

# === –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram ===
def process_telegram_update(json_data):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram")
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        update = Update.de_json(json_data, bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_update():
            import asyncio
            asyncio.run(telegram_app.process_update(update))
        
        Thread(target=run_update).start()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False

# === Webhook –º–∞—Ä—à—Ä—É—Ç—ã ===
@app.route("/api", methods=["POST"])
def api_webhook():
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /api webhook")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        json_data = request.get_json(force=True)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {json_data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        success = process_telegram_update(json_data)
        
        if success:
            return Response("ok", status=200)
        else:
            return Response("Failed to process update", status=500)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /api webhook: {e}")
        return Response(f"error: {str(e)}", status=500)

@app.route("/", methods=["POST"])
def root_webhook():
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π webhook")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        json_data = request.get_json(force=True)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {json_data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        success = process_telegram_update(json_data)
        
        if success:
            return Response("ok", status=200)
        else:
            return Response("Failed to process update", status=500)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ webhook: {e}")
        return Response(f"error: {str(e)}", status=500)

# === –ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ===
@app.route("/", methods=["GET"])
def health_check():
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
    return "Telegram bot is running!"

# === –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ ===
@app.route("/set-webhook", methods=["GET"])
def set_webhook_route():
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook")
    import asyncio
    try:
        result = asyncio.run(set_webhook())
        return jsonify(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ set_webhook: {e}")
        return jsonify({"error": str(e)})

@app.route("/webhook-info", methods=["GET"])
def webhook_info():
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook")
    import asyncio
    try:
        result = asyncio.run(get_webhook_info())
        return jsonify(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ get_webhook_info: {e}")
        return jsonify({"error": str(e)})

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook ===
async def set_webhook():
    webhook_url = "https://telegram-remodel-bot.vercel.app/api"
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –Ω–∞ {webhook_url}")
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, data={"url": webhook_url})
            result = response.json()
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Telegram API: {result}")
            return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        return {"error": str(e)}

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook ===
async def get_webhook_info():
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            result = response.json()
            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook: {result}")
            return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        return {"error": str(e)}

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
try:
    import asyncio
    asyncio.run(set_webhook())
    logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
except Exception as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
