import os
import logging
import nest_asyncio
from flask import Flask, request
from telegram import Update, Bot, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

nest_asyncio.apply()
app = Flask(__name__)

# Telegram config
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(BOT_TOKEN)

# States
CLIENT_NAME, ROOM_TYPE, LOCATION, CLIENT_GOAL, WHAT_DONE, MATERIALS, FEATURES, GDRIVE = range(8)

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot app
telegram_app: Application = ApplicationBuilder().token(BOT_TOKEN).build()

# Admin ID
ADMIN_CHAT_ID = 130060469  # Replace if needed

# Keyboard
def get_main_keyboard():
    return ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)

# Notify admin
async def notify_admin(data: dict):
    summary = (
        f"üì¢ *–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç!*\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {data.get('client_name') or '‚Äî'}\n"
        f"üèóÔ∏è –ö–æ–º–Ω–∞—Ç–∞: {data.get('room_type') or '‚Äî'}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {data.get('location') or '‚Äî'}\n"
        f"üåü –¶–µ–ª—å: {data.get('goal') or '‚Äî'}\n"
        f"üí™ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {data.get('what_done') or '‚Äî'}\n"
        f"üß± –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {data.get('materials') or '‚Äî'}\n"
        f"‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {data.get('features') or '‚Äî'}\n"
        f"üìÇ Google Drive: {data.get('drive_link') or '‚Äî'}"
    )
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=summary, parse_mode="Markdown")

# Helpers
async def get_or_skip(update, context, key, next_state, prompt):
    text = update.message.text
    context.user_data[key] = None if text.lower().strip() == "/skip" else text.strip()
    await update.message.reply_text(prompt)
    return next_state

# Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üôã‚Äç‚ôÇÔ∏è –ö–∞–∫ –∑–æ–≤—É—Ç –∫–ª–∏–µ–Ω—Ç–∞?",
        reply_markup=ReplyKeyboardRemove()
    )
    return CLIENT_NAME

async def get_client_name(update, context): return await get_or_skip(update, context, "client_name", ROOM_TYPE, "üèóÔ∏è –ö–∞–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ?")
async def get_room_type(update, context): return await get_or_skip(update, context, "room_type", LOCATION, "üìç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏ —à—Ç–∞—Ç–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç?")
async def get_location(update, context): return await get_or_skip(update, context, "location", CLIENT_GOAL, "üåü –ß—Ç–æ —Ö–æ—Ç–µ–ª –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ—Å—Ç–∏—á—å –∫–ª–∏–µ–Ω—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ä–µ–º–æ–Ω—Ç, –Ω–µ—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ)")
async def get_goal(update, context): return await get_or_skip(update, context, "goal", WHAT_DONE, "üí™ –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π?")
async def get_done(update, context): return await get_or_skip(update, context, "what_done", MATERIALS, "üß± –ö–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å? (–Ω–∞–∑–≤–∞–Ω–∏—è, —Ü–≤–µ—Ç–∞)")
async def get_materials(update, context): return await get_or_skip(update, context, "materials", FEATURES, "‚ú® –ë—ã–ª–∏ –ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è?")
async def get_features(update, context): return await get_or_skip(update, context, "features", GDRIVE, "üìÇ –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É Google Drive.\n–í–Ω—É—Ç—Ä–∏ –Ω–µ—ë –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–∞–ø–∫–∏: before, after, 3D, drawings.")

async def get_drive_link(update, context):
    context.user_data["drive_link"] = update.message.text.strip()
    await update.message.reply_text("üéâ –°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=get_main_keyboard())
    await notify_admin(context.user_data)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –í–≤–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_main_keyboard())
    return ConversationHandler.END

# Setup conversation
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CLIENT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_client_name)],
        ROOM_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_room_type)],
        LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_location)],
        CLIENT_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_goal)],
        WHAT_DONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_done)],
        MATERIALS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_materials)],
        FEATURES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_features)],
        GDRIVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_drive_link)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True,
)

telegram_app.add_handler(conv_handler)

# Webhook handler
@app.route("/", methods=["POST"])
async def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    await telegram_app.process_update(update)
    return "ok"
